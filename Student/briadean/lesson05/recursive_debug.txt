
Bris-MBP:lesson05 bri$ python3 -m pdb recursive.py 6

# Kicking off the debugger for initial step through

> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(3)<module>()
-> import sys
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(6)<module>()
-> def my_fun(n):
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(13)<module>()
-> if __name__ == "__main__":
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(14)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(15)<module>()
-> print(my_fun(n))
(Pdb) n
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pdb.py", line 1667, in main
    pdb._runscript(mainpyfile)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 431, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "/Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py", line 15, in <module>
    print(my_fun(n))
  File "/Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py", line 10, in my_fun
    return my_fun(n/2)
  File "/Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py", line 10, in my_fun
    return my_fun(n/2)
  File "/Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py", line 10, in my_fun
    return my_fun(n/2)
  [Previous line repeated 980 more times]
  File "/Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py", line 6, in my_fun
    def my_fun(n):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 50, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 76, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 173, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 29, in canonic
    if filename == "<" + filename[1:-1] + ">":
RecursionError: maximum recursion depth exceeded in comparison
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py(29)canonic()
-> if filename == "<" + filename[1:-1] + ">":

# Second run through to dig in a little deeper

(Pdb) cont
Post mortem debugger finished. The recursive.py will be restarted
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(3)<module>()
-> import sys
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(6)<module>()
-> def my_fun(n):
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(13)<module>()
-> if __name__ == "__main__":
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(14)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(15)<module>()
-> print(my_fun(n))
(Pdb) s
--Call--
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(6)my_fun()
-> def my_fun(n):
(Pdb) pp n
6
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(7)my_fun()
-> if n == 2:
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(10)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(6)my_fun()
-> def my_fun(n):
(Pdb) pp n
3.0
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(7)my_fun()
-> if n == 2:
(Pdb) n
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(10)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /Users/bri/Documents/Code/PycharmProjects/UW-220/lesson05/recursive.py(6)my_fun()
-> def my_fun(n):
(Pdb) pp n
1.5

# At this point n == 1.5. The statement to break out of the loop (n == 2) can't
evaluate to 2 at this point which is why we get a RecursionError. Furthermore, this
logic would theoretically only work for values that are divisible by 2. At the very
least, a different condition needs to be used to evaluate when to break out of the
loop. 
