"""
    Simple database examle with Peewee ORM, sqlite and Python
    Here we define the schema
    For the Lesson 7 activity I added the class for the Department table
    I also use the feature that autogenerates ids for the PK
"""

import logging
from peewee import *
# need this library for hybrid properties
from playhouse.hybrid import *
from datetime import date

logging.basicConfig(level=logging.INFO) # change to INFO to show info log, change to CRITICAL to silence logger
logger = logging.getLogger(__name__)

logger.info('One off program to build the classes from the model in the database')

logger.info('Here we define our data (the schema)')
logger.info('First name and connect to a database (sqlite here)')

logger.info('The next 3 lines of code are the only database specific code')

database = SqliteDatabase('personjob.db')
database.connect()
database.execute_sql('PRAGMA foreign_keys = ON;') # needed for sqlite only

logger.info('This means we can easily switch to a different database')
logger.info('Enable the Peewee magic! This base class does it all')
logger.info('By inheritance only we keep our model (almost) technology neutral')

class BaseModel(Model):
    class Meta:
        database = database

class Person(BaseModel):
    """
        This class defines Person, which maintains details of someone
        for whom we want to research career to date.
    """

    logger.info('Specify the fields in our model, their lengths and if mandatory')
    logger.info('Using the autogenerated PK')

    person_name = CharField(max_length = 50)
    lives_in_town = CharField(max_length = 40)
    nickname = CharField(max_length = 20, null = True)


class Department(BaseModel):
    """
        This class defines Department, which maintains details about a department
    """

    department_code = CharField(max_length = 4)
    department_name = CharField(max_length = 40)
    manager = CharField(max_length = 50)

class Job(BaseModel):
    """
        This class defines Job, which maintains details of past Jobs
        held by a Person. Added FK to Department for lesson 7 activity
    """

    logger.info('Now the Job class with a similar approach')
    job_name = CharField(max_length = 30)
    logger.info('Dates')
    start_date = DateField(formats = 'YYYY-MM-DD')
    end_date = DateField(formats = 'YYYY-MM-DD')

    # # wasn't sure how else to get the number of days between end_date and start_date so calculated
    # # a date diff from datetime library and converted it to the number of days.  
    @hybrid_property
    def days_on_job(self):
        return (date(int(self.end_date[0:4]), int(self.end_date[5:7]), int(self.end_date[-2:])) - 
            date(int(self.start_date[0:4]), int(self.start_date[5:7]), int(self.start_date[-2:]))).days

    @days_on_job.expression
    def days_on_job(cls):
        return fn.julianday(cls.end_date) - fn.julianday(cls.start_date)
    
    logger.info('Number')
    salary = DecimalField(max_digits = 7, decimal_places = 2)

    logger.info('Which person had the Job')
    logger.info('Use the autogenerated id from Person table as FK')
    person_id = ForeignKeyField(Person, related_name='was_filled_by', null=False)
    
    logger.info('Which department the job belonged to')
    logger.info('Use the autogenerated id from Department table as FK')
    dept_id = ForeignKeyField(Department, null=False)



database.create_tables([
        Job,
        Person,
        Department
    ])

database.close()
