"""
    Simple database examle with Peewee ORM, sqlite and Python
    Here we define the schema
    For the Lesson 7 activity I added the class for the Department table
    I also use the autogenerated ids for the PK
"""

from peewee import *
from datetime import date
# need this library for hybrid properties
from playhouse.hybrid import *

database = SqliteDatabase('personjob.db')
database.connect()
database.execute_sql('PRAGMA foreign_keys = ON;')

class BaseModel(Model):
    class Meta:
        database = database


class Person(BaseModel):
    """
        This class defines Person, which maintains details of someone
        for whom we want to research career to date.
    """

    person_name = CharField(max_length = 50)
    lives_in_town = CharField(max_length = 40)
    nickname = CharField(max_length = 20, null = True)


class Department(BaseModel):
    """
        This class defines Department, which maintains details about a department
    """

    department_code = CharField(max_length = 4)
    department_name = CharField(max_length = 40)
    manager = CharField(max_length = 50)

class Job(BaseModel):
    """
        This class defines Job, which maintains details of past Jobs
        held by a Person. Added FK to Department for lesson 7 activity
    """

    job_name = CharField(max_length = 30)
    start_date = DateField(formats = 'YYYY-MM-DD')
    end_date = DateField(formats = 'YYYY-MM-DD')

    # # wasn't sure how else to get the number of days between end_date and start_date so calculated
    # # a date diff from datetime library and converted it to the number of days.
    @hybrid_property
    def days_on_job(self):
        return (date(int(self.end_date[0:4]), int(self.end_date[5:7]), int(self.end_date[-2:])) - 
            date(int(self.start_date[0:4]), int(self.start_date[5:7]), int(self.start_date[-2:]))).days

    @days_on_job.expression
    def days_on_job(cls):
        return fn.julianday(cls.end_date) - fn.julianday(cls.start_date)


    salary = DecimalField(max_digits = 7, decimal_places = 2)
    person_id = ForeignKeyField(Person, related_name='was_filled_by', null=False)
    dept_id = ForeignKeyField(Department, null=False)
