What is wrong with our logic?
Why doesn't the function stop calling itself?
What's happening to the value of 'n' as the function gets deeper and deeper into recursion?

The base case in this recursive function does not consider possible base cases outside of 2. Adding a base case if n < 2 would be required to know if n is a power of 2

------
Terminal Output:
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(1)<module>()
-> import sys
(Pdb) n
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(3)<module>()
-> def my_fun(n):
(Pdb) n
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(9)<module>()
-> if __name__ == '__main__':
(Pdb) n
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(10)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(11)<module>()
-> print(my_fun(n))
(Pdb) s
--Call--
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) print(n)
12
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) print(n)
6.0
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(4)my_fun()
-> if n == 2:

(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) print(n)
6.0
(Pdb) s
--Call--
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) print(n)
3.0
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) s
> c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) print(n)
1.5
(Pdb) n
--KeyboardInterrupt--
(Pdb) n
Traceback (most recent call last):
  File "C:\Program Files\Python36\lib\pdb.py", line 1667, in main
    pdb._runscript(mainpyfile)

  File "C:\Program Files\Python36\lib\pdb.py", line 1548, in _runscript
    self.run(statement)
  File "C:\Program Files\Python36\lib\bdb.py", line 434, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py", line 11, in <module>
    print(my_fun(n))
  File "c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py", line 7, in my_fun
    return my_fun(n/2)
  File "c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py", line 7, in my_fun
    return my_fun(n/2)
  File "c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py", line 7, in my_fun
    return my_fun(n/2)
  [Previous line repeated 980 more times]
  File "c:\users\krist\github\sp2018-python220-accelerated\student\kristianjf\lesson05\recursive.py", line 3, in my_fun
    def my_fun(n):
  File "C:\Program Files\Python36\lib\bdb.py", line 53, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "C:\Program Files\Python36\lib\bdb.py", line 79, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "C:\Program Files\Python36\lib\bdb.py", line 176, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "C:\Program Files\Python36\lib\bdb.py", line 32, in canonic
    if filename == "<" + filename[1:-1] + ">":
RecursionError: maximum recursion depth exceeded in comparison
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> c:\program files\python36\lib\bdb.py(32)canonic()
-> if filename == "<" + filename[1:-1] + ">":
